<?php

use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AnonymousUserSession;

/**
 * @file
 * Used to automatically log out a user after a preset time.
 */

/**
 * Implements hook_help().
 */
function autologout_help($path, $arg) {
  $seconds = Drupal::service('autologout.manager')->autologoutGetUserTimeout();
  $message = NULL;

  switch ($path) {
    case 'admin/help#autologout':
      $message = '<p>' . t("This module allows you to force site users to be logged out after a given amount of time due to inactivity after first being presented with a confirmation dialog. Your current logout threshold is %seconds seconds.", array('%seconds' => $seconds)) . '</p>';
      break;
  }

  return $message;
}

/**
 * Checks to see if timeout threshold is outside max/min values. Only done here
 * to centrilize and stop repeated code. Hard coded min, configurable max.
 *
 * @param int $timeout
 *   The timeout value in seconds to validate.
 * @param int $max_timeout
 *   (optional) A maximum timeout. If not set the current system
 *    default maximum is used.
 *
 * @return bool
 *    Return TRUE or FALSE
 */
function autologout_timeout_validate($timeout, $max_timeout = NULL) {
  $validate = TRUE;
  if (is_null($max_timeout)) {
    $max_timeout = \Drupal::config('autologout.settings')->get('max_timeout');
  }
  if (!is_numeric($timeout) || $timeout < 0 || ($timeout > 0 && $timeout < 60) || $timeout > $max_timeout) {
    // Less then 60, greater then max_timeout and is numeric.
    // 0 is allowed now as this means no timeout.
    $validate = FALSE;
  }
  return $validate;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a field to user/edit to change that users logout.
 */
function autologout_form_user_form_alter(&$form, FormStateInterface $form_state) {

  $user_timeout = Drupal::service('autologout.manager')->autologoutGetUserTimeout();
  $user = \Drupal::currentUser();


  $current_uid = $user->id();
  $userid = $form_state->getFormObject()->getEntity()->id();
  $access = FALSE;

  // If user has access to change, and they are changing their own and only
  // thier own timeout. Or they are an admin.
  if (($user->hasPermission('change own logout threshold') && $current_uid == $userid) || $user->hasPermission('administer autologout')) {
    $access = TRUE;
  }

  if ($access) {
    $form['autologout_user_' . $userid] = array(
      '#type' => 'textfield',
      '#title' => t('Your current logout threshold'),
      '#default_value' => \Drupal::config('autologout.settings')->get('user_' . $userid),
      '#size' => 8,
      '#description' => t('How many seconds to give a user to respond to the logout dialog before ending their session.'),
      '#element_validate' => array('_autologout_user_uid_timeout_validate'),
    );

    $form['actions']['submit']['#submit'][] = 'autologout_user_profile_submit';
  }
}


/**
 * Form validation.
 */
function _autologout_user_uid_timeout_validate($element, FormStateInterface $form_state) {
  $max_timeout = \Drupal::config('autologout.settings')->get('max_timeout');
  $timeout = $element['#value'];

  // Set error if it has a value that isnt strictly a number between 60 and max.
  if ($timeout != "" && ($timeout < 10 || ($timeout > 0 && $timeout < 60) || $timeout > $max_timeout || !is_numeric($timeout))) {
    $form_state->setError($element, t('The timeout must be an integer greater than 60, and less then %max.', array('%max' => $max_timeout)));
  }
}


/**
 * Handle submission of timeout threshold in user/edit.
 */
function autologout_user_profile_submit(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  $current_uid = $user->id();
  $userid = $form_state->getFormObject()->getEntity()->id();
  $access = FALSE;

  if (($user->hasPermission('change own logout threshold') && $current_uid == $userid) || $user->hasPermission('administer autologout')) {
    $access = TRUE;
  }

  // Access is reused here as a security measure. Not only will the element not
  // display but wont sumbit without access.
  if ($access) {
    \Drupal::configFactory()->getEditable('autologout.settings')->set('user_' . $userid, $form_state->getValue('user_' . $userid))->save();
  }
}


/**
 * Implements hook_autologout_prevent().
 */
function autologout_autologout_prevent() {
  $user = \Drupal::currentUser();

  // Don't include autologout JS checks on ajax callbacks.
  $paths = array(
    'system',
    'autologout_ajax_get_time_left',
    'autologout_ahah_logout',
    'autologout_ahah_set_last',
  );
  $url = Url::fromRoute('<current>');
  $path_args = explode('/', $url->toString());
  if (in_array($path_args[1], $paths)) {
    return TRUE;
  }

  // If user is anonymous or has no timeout set.
  if ($user->id() == 0 || (!Drupal::service('autologout.manager')->autologoutGetUserTimeout())) {
    return TRUE;
  }

  // If the user has checked remember_me via the remember_me module.
  if (!empty($user->data['remember_me'])) {
    return TRUE;
  }
}


/**
 * Implements hook_autologout_refresh_only().
 */
function autologout_autologout_refresh_only() {
  $url = Url::fromRoute('<current>');
  $route = explode('/', $url->toString());
  if (!\Drupal::config('autologout.settings')->get('enforce_admin') && \Drupal::service('router.admin_context')->isAdminRoute(\Drupal::routeMatch()->getRouteObject())) {
    return TRUE;
  }
}


/**
 * Implements hook_page_attachments().
 *
 * Add a form element to every page which is used to detect if the page was
 * loaded from browser cache. This happens when the browser's back button is
 * pressed for example. The JS will set the value of the hidden input element
 * to 1 after initial load. If this is 1 on subsequent loads, the page was
 * loaded from cache and an autologout timeout refresh needs to be triggered.
 */
function autologout_page_attachments(array &$page) {
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $autologout_manager = \Drupal::service('autologout.manager');
  if ($uid == 0) {
    if (!empty($_GET['autologout_timeout']) && $_GET['autologout_timeout'] == 1 && empty($_POST)) {
      $autologout_manager->autologoutInactivityMessage();

    }
    return;
  }

  // Check if JS should be included on this request.
  if ($autologout_manager->autologoutPreventJs()) {

    return;
  }

  // Check if anything wants to be refresh only. This URL would
  // include the javascript but will keep the login alive whilst
  // that page is opened.
  $refresh_only = $autologout_manager->autologoutRefreshOnly();

  $now = REQUEST_TIME;

  $timeout = $autologout_manager->autologoutGetUserTimeout();

  $timeout_padding = \Drupal::config('autologout.settings')->get('padding');
  $redirect_url = \Drupal::config('autologout.settings')->get('redirect_url');
  $redirect_query = \Drupal::service('redirect.destination')->getAsArray() + array('timeout' => 1);
  $no_dialog = \Drupal::config('autologout.settings')->get('no_dialog');
  $use_alt_logout_method = \Drupal::config('autologout.settings')->get('use_alt_logout_method');


  // Get all settings JS will need for dialog.
  $msg = t('@msg', array('@msg' => \Drupal::config('autologout.settings')->get('message')));
  $settings = array(
    'timeout' => $refresh_only ? ($timeout * 500) : ($timeout * 1000),
    'timeout_padding' => $timeout_padding * 1000,
    'message' => t('@msg', array('@msg' => $msg)),
    'redirect_url' => Url::fromUserInput($redirect_url, array('query' => $redirect_query))->toString(),
    'title' => t('@name Alert', array('@name' => \Drupal::config('autologout.settings')->get('site_name'))),
    'refresh_only' => $refresh_only,
    'no_dialog' => $no_dialog,
    'use_alt_logout_method' => $use_alt_logout_method,
  );

  autologaut_attach_js($page, $settings, TRUE);

  // We need a backup plan if JS is disabled.
  if (!$refresh_only && isset($_SESSION['autologout_last'])) {
    // If time since last access is > than the timeout + padding, log them out.
    if (($now - $_SESSION['autologout_last']) >= ($timeout + (int) $timeout_padding)) {
      $autologout_manager->autologoutLogout();

      // User has changed so force Drupal to remake decisions based on user.
      global $theme, $theme_key;
      drupal_static_reset();
      $theme = NULL;
      $theme_key = NULL;
      
      Drupal::theme()->getActiveTheme();

      \Drupal::theme()->getActiveTheme();
      $autologout_manager->autologoutInactivityMessage();

    }
    else {
      $_SESSION['autologout_last'] = $now;
    }
  }
  else {
    $_SESSION['autologout_last'] = $now;
  }
}

/**
 * Implements hook_page_bottom().
 */
function autologout_page_bottom() {
  if (!Drupal::service('autologout.manager')->autologoutPreventJs()) {
    $page_bottom['autologout'] = [
      '#markup' => '<form id="autologout-cache-check"><input type="hidden" id="autologout-cache-check-bit" value="0" /></form>',
    ];
  }
}
/**
 * Adds the necessary js and libraries.
 *
 * @param array $element
 *        The renderable array element to #attach the js to.
 *
 * @param array $settings
 *        The JS Settings.
 *
 * @param bool $every_page
 */
function autologaut_attach_js(&$element, $settings, $every_page = FALSE) {
  $element['#attached']['drupalSettings']['autologout'] = $settings;
  $element['#attached']['library'][] = 'autologout/drupal.autologout';
}

/**
 * Implements hook_user_login().
 *
 * Delete stale sessions for the user on login. This stops
 * session_limit module thinking the user has reached their
 * session limit.
 */
function autologout_user_login($account) {
  // Cleanup old sessions.
  $timeout = Drupal::service('autologout.manager')->autologoutGetUserTimeout($account->id());

  if (empty($timeout)) {
    // Users that don't get logged have their sessions left.
    return;
  }

  $timeout_padding = \Drupal::config('autologout.settings')->get('padding');
  $timestamp = REQUEST_TIME - ($timeout + $timeout_padding);

  // Find all stale sessions.
  $database = \Drupal::database();
  $sids = $database->select('sessions', 's')
    ->fields('s', array('sid'))
    ->condition('uid', $account->id())
    ->condition('timestamp', $timestamp, '<')
    ->orderBy('timestamp', 'DESC')
    ->execute()
    ->fetchCol();

  if (!empty($sids)) {
    // Delete stale sessions at login.
    $database->delete('sessions')
      ->condition('sid', $sids, 'IN')
      ->execute();
  }
}
