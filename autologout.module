<?php

/**
 * @file
 * Used to automagically log out a user after a preset time.
 */

/**
 * Implements hook_permission().
 */
function autologout_permission() {
  return array(
    'change own logout threshold' => array(
      'title' => t('Change own logout threshold'),
      'description' => t('Selected users will be able to edit there own logout threshold.'),
    ),
    'administer autologout'  => array(
      'title' => t('Administer Autologout'),
      'description' => t('Administer the autologout settings'),
    ),
  );
}

// /**
//  * Drupal reset timer form on timer block.
//  */
// function autologout_create_block_form() {

//   $markup = autologout_create_timer();

//   $form['autologout_reset'] = array(
//     '#type' => 'button',
//     '#value' => t('Reset Timeout'),
//     '#weight' => 1,
//     '#limit_validation_errors' => FALSE,
//     '#executes_submit_callback' => FALSE,
//     '#ajax' => array(
//       'callback' => 'autologout_ahah_set_last',
//     ),
//   );

//   $form['timer'] = array(
//     '#markup' => $markup,
//   );

//   return $form;
// }

/**
 * Get the timer HTML markup.
 *
 * @return string
 *   HTML to insert a countdown timer.
 */
function autologout_create_timer() {
  $time_remaining = _autologout_get_remaining_time();
  // $timeformat = filter_xss_admin(\Drupal::config('autologout.settings')->get('autologout_jstimer_format', '%hours%:%mins%:%secs%'));
}

// /**
//  * Implements hook_block_configure().
//  */
// function autologout_block_configure($delta = '') {
//   $block = array();

//   if (module_exists('jstimer')) {
//     if (!module_exists('jst_timer')) {
//       drupal_set_message(t('The "Widget: timer" module must also be enabled for the dynamic countdown to work in the automated logout block.'), 'error');
//     }

//     if (variable_get('jstimer_js_load_option', 0) != 1) {
//       drupal_set_message(t("The Javascript timer module's 'Javascript load options' setting should be set to 'Every page' for the dynamic countdown to work in the automated logout block."), 'error');
//     }
//   }

//   return $block;
// }

/**
 * Implements hook_help().
 */
function autologout_help($path, $arg) {
  $seconds = _autologout_get_user_timeout();
  $message = NULL;

  switch ($path) {
    case 'admin/help#autologout' :
      $message = '<p>' . t("This module allows you to force site users to be logged out after a given amount of time due to inactivity after first being presented with a confirmation dialog. Your current logout threshold is %seconds seconds.", array('%seconds' => $seconds)) . '</p>';
      break;
  }

  return $message;
}


// /**
//  * Returns HTML for the autologout block.
//  */
// function theme_autologout_block($variables) {
//   $time_remaining = $variables['time_remaining'];
//   $timeformat = $variables['timeformat'];

//   return "<div id='timer'><span class='jst_timer'>
//     <span class='interval' style='display: none;'>$time_remaining</span>
//     <span class='format_txt' style='display:none;'>$timeformat</span>
//     </span></div>";
// }

/**
 * Checks to see if timeout threshold is outside max/min values. Only done here
 * to centrilize and stop repeated code. Hard coded min, configurable max.
 *
 * @param int $timeout
 *   The timeout value in seconds to validate
 * @param int $max_timeout
 *   (optional) A maximum timeout. If not set the current system
 *   default maximum is used.
 */
function autologout_timeout_validate($timeout, $max_timeout = NULL) {
  $validate = FALSE;

  if (is_null($max_timeout)) {
    $max_timeout = \Drupal::config('autologout.settings')->get('autologout_max_timeout');
  }

  if (!is_numeric($timeout) || $timeout < 0 || ($timeout > 0 && $timeout < 60) || $timeout > $max_timeout) {
    // Less then 60, greater then max_timeout and is numeric.
    // 0 is allowed now as this means no timeout.
    $validate = FALSE;
  }
  else {
    $validate = TRUE;
  }

  return $validate;
}


/**
 * Adds a field to user/edit to change that users logout.
 */
function autologout_form_user_form_alter(&$form, $form_state) {
  $user_timeout = _autologout_get_user_timeout();
  $user = \Drupal::currentUser();
  $current_uid = $user->id();
  $userid = $form_state['user']->id();
  $access = FALSE;

  // If user has access to change, and they are changing their own and only
  // thier own timeout. Or they are an admin.
  if ((user_access('change own logout threshold') && $current_uid == $userid) || user_access('administer autologout')) {
    $access = TRUE;
  }

  if ($access) {
    $form['autologout_user_' . $userid] = array(
      '#type' => 'textfield',
      '#title' => t('Your current logout threshold'),
      '#default_value' => \Drupal::config('autologout.settings')->get('autologout_user_' . $userid),
      '#size' => 8,
      '#description' => t('How many seconds to give a user to respond to the logout dialog before ending their session.'),
      '#element_validate' => array('_autologout_user_uid_timeout_validate'),
    );

    $form['actions']['submit']['#submit'][] = 'autologout_user_profile_submit';
  }
}


/**
 * Form validation.
 */
function _autologout_user_uid_timeout_validate($element, &$form_state) {
  $max_timeout = \Drupal::config('autologout.settings')->get('autologout_max_timeout');
  $timeout = $element['#value'];

  // Set error if it has a value that isnt strictly a number between 60 and max.
  if ($timeout != "" && ($timeout < 10 || ($timeout > 0 && $timeout < 60) || $timeout > $max_timeout || !is_numeric($timeout))) {
    form_error($element,$form_state, t('The timeout must be an integer greater than 60, and less then %max.', array('%max' => $max_timeout)));
  }
}


/**
 * Handle submission of timeout threshold in user/edit.
 */
function autologout_user_profile_submit(&$form, &$form_state) {
  $user = \Drupal::currentUser();
  $current_uid = $user->id();
  $userid = $form_state['user']->id();
  $access = FALSE;

  if ((user_access('change own logout threshold') && $current_uid == $userid) || user_access('administer autologout')) {
    $access = TRUE;
  }

  // Access is reused here as a security measure. Not only will the element not
  // display but wont sumbit without access.
  if ($access) {
    $userid = $form_state['user']->id();
    $val = $form_state['values']['autologout_user_' . $userid];
    \Drupal::config('autologout.settings')
      ->set('autologout_user_' . $userid, $form_state['values']['autologout_user_' . $userid])
      ->save();
  }
}


/**
 * Implements hook_autologout_prevent().
 */
function autologout_autologout_prevent() {
  $user = \Drupal::currentUser();

  // Don't include autologout JS checks on ajax callbacks.
  $paths = array(
    'system',
    'autologout_ajax_get_time_left',
    'autologout_ahah_logout',
    'autologout_ahah_set_last',
  );

  if (in_array(arg(0), $paths)) {
    return TRUE;
  }

  // If user is anonymous or has no timeout set.
  if ($user->id() == 0 || (!_autologout_get_user_timeout())) {
    return TRUE;
  }

  // If the user has checked remember_me via the remember_me module.
  if (!empty($user->data['remember_me'])) {
    return TRUE;
  }
}


/**
 * Implements hook_autologout_refresh_only().
 */
function autologout_autologout_refresh_only() {
  // Check to see if an open admin page will keep login alive.
  if (!\Drupal::config('autologout.settings')->get('autologout_enforce_admin') && path_is_admin(current_path())) {
    return TRUE;
  }
}


/**
 * Implements hook_page_build().
 *
 * Add a form element to every page which is used to detect if the page was
 * loaded from browser cache. This happens when the browser's back button is
 * pressed for example. The JS will set the value of the hidden input element
 * to 1 after initial load. If this is 1 on subsequent loads, the page was
 * loaded from cache and an autologout timeout refresh needs to be triggered.
 */
function autologout_page_build(&$page) {
  $user = \Drupal::currentUser();
  $userid = $user->id();
  if (empty($userid)) {
    if (!empty($_GET['autologout_timeout']) && $_GET['autologout_timeout'] == 1 && empty($_POST)) {
      _autologout_inactivity_message();
    }
    return;
  }
  if (_autologout_prevent()) {
    return;
  }
  $refresh_only = _autologout_refresh_only();
  if (!_autologout_prevent()) {
    $page['page_bottom']['autologout'] = array(
      '#markup' => '<form id="autologout-cache-check"><input type="hidden" id="autologout-cache-check-bit" value="0" /></form>',
    );
  }

  $timeout = _autologout_get_user_timeout();
  $timeout_padding = \Drupal::config('autologout.settings')->get('autologout_padding');
  $redirect_url = \Drupal::config('autologout.settings')->get('autologout_redirect_url');
  $redirect_query = drupal_get_destination() + array('autologout_timeout' => 1);
  $no_dialog = \Drupal::config('autologout.settings')->get('autologout_no_dialog');

  // Get all settings JS will need for dialog.
  $msg = t('@msg', array('@msg' => \Drupal::config('autologout.settings')->get('autologout_message')));
  $settings = array(
    'timeout' => $refresh_only ? ($timeout * 500) : ($timeout * 1000),
    'timeout_padding' => $timeout_padding * 1000,
    'message' => t('@msg', array('@msg' => $msg)),
    'redirect_url' => url($redirect_url, array('query' => $redirect_query)),
    'title' => t('@name Alert', array('@name' => \Drupal::config('autologout.settings')->get('site_name'))),
    'refresh_only' => $refresh_only,
    'no_dialog' => $no_dialog,
    'basepath' => '/',
  );

  autologaut_attach_js($page, $settings, TRUE);

  $now = time();

  // We need a backup plan if JS is disabled.
  if (!$refresh_only && isset($_SESSION['autologout_last'])) {
    // If time since last access is > than the timeout + padding, log them out.
    if (($now - $_SESSION['autologout_last']) >= ($timeout + (int) $timeout_padding)) {
      _autologout_logout();

      // User has changed so force Drupal to remake decisions based on user.
        global $theme, $theme_key;
        drupal_static_reset();
        $theme = NULL;
        $theme_key = NULL;
        // menu_set_custom_theme();
        drupal_theme_initialize();
        _autologout_inactivity_message();
    }
    else {
      $_SESSION['autologout_last'] = $now;
    }
  }
  else {
    $_SESSION['autologout_last'] = $now;
  }
}


/**
 * Adds the necessary js and libraries.
 *
 * @param array $element
 *        The renderable array element to #attach the js to
 *
 * @param array $settings
 *
 * @param boolean $every_page
 */
function autologaut_attach_js(&$element, $settings, $every_page = FALSE) {
  $element['#attached']['library'][] = 'core/jquery.ui.dialog';;
  $element['#attached']['library'][] = 'core/drupal.ajax';
  $element['#attached']['js'][] = array(
    'data' => array('autologout' => array(
      'defaults' => $settings,
    )),
    'type' => 'setting',
  );
  $element['#attached']['js'][drupal_get_path('module', 'autologout') . '/js/autologout.js'] = array('every_page' => $every_page);
}


/**
 * Get the time remaining before logout.
 *
 * @return int
 *   Number of seconds remaining.
 */
function _autologout_get_remaining_time() {
  $timeout = _autologout_get_user_timeout();
  $time_passed = isset($_SESSION['autologout_last']) ? time() - $_SESSION['autologout_last'] : 0;
  return $timeout - $time_passed;
}


/**
 * Go through every role to get timeout value, default is the global timeout.
 */
function _autologout_get_role_timeout() {
  $default_timeout = \Drupal::config('autologout.settings')->get('autologout_timeout');
  $roles = user_roles(TRUE);
  $role_timeout = array();

  // Go through roles, get timeouts for each and return as array.
  foreach ($roles as $rid => $role) {
    if (\Drupal::config('autologout.settings')->get('autologout_role_' . $rid)) {
      $timeout_role = \Drupal::config('autologout.settings')->get('autologout_role_' . $rid . '_timeout');
      $role_timeout[$rid] = $timeout_role;
    }
  }
  return $role_timeout;
}


/**
 * Get a user's timeout in seconds.
 *
 * @param int $uid
 *   (Optional) Provide a user's uid to get the timeout for.
 *   Default is the logged in user.
 *
 * @return int
 *   The number of seconds the user can be idle for before being
 *   logged out. A value of 0 means no timeout.
 */
function _autologout_get_user_timeout($uid = NULL) {

  if (is_null($uid)) {
    // If $uid is not provided, use the logged in user.
    $user = \Drupal::currentUser();
  }
  else {
    $user = user_load($uid);
  }

  if ($user->id() == 0) {
    // Anonymous doesn't get logged out.
    return 0;
  }

  if (is_numeric($user_timeout = \Drupal::config('autologout.settings')->get('autologout_user_' . $user->id()))) {
    // User timeout takes precedence.
    return $user_timeout;
  }

  // Get role timeouts for user.
  if (\Drupal::config('autologout.settings')->get('autologout_role_logout')) {
    $user_roles = $user->getRoles();
    $output = array();
    $timeouts = _autologout_get_role_timeout();
    foreach ($user_roles as $rid => $role) {
      if (isset($timeouts[$role])) {
        $output[$rid] = $timeouts[$role];
      }
    }

    // Assign the lowest timeout value to be session timeout value.
    if (!empty($output)) {
      // If one of the user's roles has a unique timeout, use this.
      return min($output);
    }
  }

  // If no user or role override exists, return the default timeout.
  return \Drupal::config('autologout.settings')->get('autologout_timeout');
}


/**
 * Helper to perform the actual logout.
 */
function _autologout_logout() {
  $user = \Drupal::currentUser();;

  if (\Drupal::config('autologout.settings')->get('autologout_use_watchdog')) {
    watchdog('user', 'Session automatically closed for %name by autologout.', array('%name' => $user->getUsername()));
  }

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();
}


/**
 * Helper to determine if a given user should be autologged out.
 */
function _autologout_logout_role($user) {
  if (\Drupal::config('autologout.settings')->get('autologout_role_logout')) {
    foreach ($user->roles as $key => $role) {
      if (\Drupal::config('autologout.settings')->get('autologout_role_' . $key)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}


/**
 * Display the inactivity message if required.
 */
function _autologout_inactivity_message() {
  $message = \Drupal::config('autologout.settings')->get('autologout_inactivity_message');
  if (!empty($message)) {
    drupal_set_message(t($message));
  }
}


/**
 * Determine if autologout should be prevented.
 *
 * @return bool
 *   TRUE if there is a reason not to autologout
 *   the current user on the current page.
 */
function _autologout_prevent() {
  foreach (module_invoke_all('autologout_prevent') as $prevent) {
    if (!empty($prevent)) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Determine if connection should be refreshed.
 *
 * @return bool
 *   TRUE if something about the current context
 *   should keep the connection open. FALSE and
 *   the standard countdown to autologout applies.
 */
function _autologout_refresh_only() {
  foreach (module_invoke_all('autologout_refresh_only') as $module_refresh_only) {
    if (!empty($module_refresh_only)) {
      return TRUE;
      break;
    }
  }

  return FALSE;
}


/**
 * Implements hook_user_login().
 *
 * Delete stale sessions for the user on login. This stops
 * session_limit module thinking the user has reached their
 * session limit.
 */
function autologout_user_login($account) {

  // Cleanup old sessions.
  $timeout = _autologout_get_user_timeout($account->id());

  if (empty($timeout)) {
    // Users that don't get logged have their sessions left.
    return;
  }

  $now = time();
  $timeout_padding = \Drupal::config('autologout.settings')->get('autologout_padding');
  $timestamp = time() - ($timeout + $timeout_padding);

  // Find all stale sessions.
  $results = db_select('sessions', 's')
    ->fields('s')
    ->condition('uid', $account->uid)
    ->condition('timestamp', $timestamp, '<')
    ->orderBy('timestamp', 'DESC')
    ->execute();

  $sids = array();
  foreach ($results as $session) {
    $sids[] = $session->sid;
  }

  if (!empty($sids)) {
    // Delete stale sessions at login.
    db_delete('sessions')
      ->condition('sid', $sids, 'IN')
      ->execute();
  }
}
